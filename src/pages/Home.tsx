import React, { useRef } from 'react'
import qs from 'qs'
import { useSelector } from 'react-redux'
import { useNavigate } from 'react-router-dom'

import Categories from '../components/Categories'
import PizzaBlock from '../components/PizzaBlock'
import Sort, { sortList } from '../components/Sort'
import Skeleton from '../components/PizzaBlock/skeleton'
import Pagination from '../components/Pagination'
import { fetchPizzas } from '../redux/slices/pizzasSlice'
import { selectPizzaData } from '../redux/slices/pizzasSlice'
import { useAppDispatch } from '../redux/store'
import { selectFilter } from '../redux/slices/filter/selector'
import { setCategoryId, setCurrentPage } from '../redux/slices/filter/slice'

const Home: React.FC = () => {
  // –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –∏–∑–º–µ–Ω–∏—Ç—å state - —ç—Ç–æ –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ dispatch, –∫–æ—Ç–æ—Ä—ã–π –µ—Å—Ç—å —É store –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç action
  const dispatch = useAppDispatch()
  const navigate = useNavigate()
  const isSearch = React.useRef(false)
  //–û–¢–≤–µ—á–∞–µ—Ç –∑–∞ –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä
  const isMounted = useRef(false)

  const { items, status } = useSelector(selectPizzaData)
  // useSelector –≤—à–∏—Ç —É–∂–µ useContext
  const { categoryId, sort, currentPage, searchValue } =
    useSelector(selectFilter)

  // useCallback‚Äî —Ö—É–∫ –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞–º–∏.
  // –í–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –º—ã –≤—ã–∑—ã–≤–∞–µ–º dispatch, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç action, –≤ —Å–≤–æ–π—Å—Ç–≤–æ payload –∫–æ—Ç–æ—Ä–æ–≥–æ —É –Ω–∞—Å –ø–æ–ø–∞–¥—É—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π id. –í—Å–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –º—ã –±–µ—Ä–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–µ–π—Ç–æ–≤.
  const onClickCategory = React.useCallback((idx: number) => {
    dispatch(setCategoryId(idx))
  }, [])

  const onChangePage = (page: number) => {
    dispatch(setCurrentPage(page))
  }

  const getPizzas = async () => {
    const order = sort?.sortProperty.includes('-') ? 'asc' : 'desc'
    const sortBy = sort?.sortProperty.replace('-', '')
    const category = categoryId > 0 ? `category=${categoryId}` : ''
    const search = searchValue ? `&search=${searchValue}` : ''

    // –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –æ—à–∏–±–∫–∏ –±–µ–∑ –ø—Ä–æ–º–∏—Å–æ–≤ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ try-catch
    if (order && sortBy) {
      dispatch(
        //@ts-ignore
        fetchPizzas({
          order,
          sortBy,
          category,
          search,
          currentPage: String(currentPage),
        })
      )
    }
  }
  //–°—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∏–ª—å—Ä—ã –∏ –º–µ–Ω—é –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ url (isMounted - –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ —Å—Å—ã–ª–∫–∞—Ö)
  // React.useEffect(() => {
  //   if (isMounted.current) {
  //     const queryString = qs.stringify({
  //       sortProperty: sort.sortProperty,
  // //// categoryId: categoryId > 0 ? categoryId : null,
  //       categoryId,
  //       currentPage,
  //     })
  //     navigate(`?${queryString}`)
  //   }
  //   // useEffect –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å –ø–µ—Ä–≤—ã–º —Ä–µ–Ω–¥–µ—Ä–æ–º, –∫–æ–≥–¥–∞ —Ä–µ–Ω–¥–µ—Ä –ø—Ä–æ–∏–∑–æ—à–µ–ª —Ç–æ —Å—Ç–∞–≤–∏–º true, –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–º–µ—Ç—Ä—ã –∫ —é—Ä–ª
  //   isMounted.current = true
  // }, [categoryId, sort.sortProperty, currentPage])

  // –î–æ—Å—Ç–∞–µ–º —Å—Å—ã–ª–∫–∏, –ø–∞—Ä—Å–∏–º –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ –æ–±—ä–µ–∫—Ç, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –≤ redux - dispatch (substring(1) --—É–±–∏—Ä–∞–µ–º ?)
  // –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º url-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ redux
  // React.useEffect(() => {
  //   if (window.location.search) {
  //     const params = qs.parse(
  //       window.location.search.substring(1)
  //     ) as unknown as SearchPizzaParams
  //     const sort = sortList.find((obj) => obj.sortProperty === params.sortBy)
  //     dispatch(
  //       setFilters({
  //         ...params,
  //         sort: sort || sortList[0],
  //       })
  //     )
  //     isSearch.current = true
  //   }
  // }, [])
  // –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∏—Ü—Ü—ã
  // React.useEffect(() => {
  //   window.scrollTo(0, 0)
  //   // –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–µ—Ç –ø–æ–∏—Å–∫–∞ –ø–æ qwery –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º, —Ç–æ –¥–µ–ª–∞–µ–º fetch –∑–∞–ø—Ä–æ—Å (–∂–¥–µ–º –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∑—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ, —Å–º–æ—Ç—Ä—è –µ—Å—Ç—å –ª–∏ –∑–∞–ø—Ä–æ—Å –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ)
  //   if (!isSearch.current) {
  //     getPizzas()
  //   }
  //   isSearch.current = false
  // }, [categoryId, sort.sortProperty, searchValue, currentPage])

  const pizzas = items.map((obj: any) => (
    // –Ω–∞ –∫–∞–∂–¥—É—é –ø–∏—Ü—Ü—É –∑–∞–≤–æ–¥–∏–º —Å—Å—ã–ª–∫—É (–ø–µ—Ä–µ–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
    <PizzaBlock key={obj.id} {...obj} />
  ))
  React.useEffect(() => {
    getPizzas()
  }, [categoryId, sort?.sortProperty, searchValue, currentPage])

  const skeletons = [...new Array(6)].map((_, index) => (
    <Skeleton key={index} />
  ))

  return (
    <div className='container'>
      <div className='content__top'>
        {/* –º–æ–∂–Ω–æ –Ω–∞–∑–≤–∞—Ç—å –∫–∞–∫ —É–≥–æ–¥–Ω–æ i */}
        <Categories value={categoryId} onClickCategory={onClickCategory} />
        {sort && <Sort value={sort} />}
      </div>
      <h2 className='content__title'>–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
      {status === 'error' ? (
        <div className='content__error-info'>
          <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòï</h2>
          <p>
            –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ü—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
            –ø–æ–∑–∂–µ.
          </p>
        </div>
      ) : (
        <div className='content__items'>
          {status === 'loading' ? skeletons : pizzas}
        </div>
      )}

      <Pagination currentPage={currentPage} onChangePage={onChangePage} />
    </div>
  )
}
export default Home
